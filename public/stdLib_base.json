{ "modules": [{ "name": "Std.Base", "classes": [{ "methods": [{ "name": "<", "documentation": " `a.< b` returns True when `a` is lesser than `b`." }, { "name": "+", "documentation": " Integer addition." }, { "name": "*", "documentation": " Integer multiplication." }, { "name": "==", "documentation": " Integer equality. `a.== b` returns True when `a` equals `b`." }, { "name": "-", "documentation": " Integer subtraction." }, { "name": ">", "documentation": " `a.> b` returns True when `a` is greater than `b`." }, { "name": "%", "documentation": " Division remainder `a.% b == a - (a / b) * b`" }, { "name": "/", "documentation": " Integral division – `a./ b` returns the largest integer `c` such that `c * b <= a`." }, { "name": "pred", "documentation": " Predecessor. `a.pred == a - 1`" }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": " Integer negation. `a.negate == -1 * a`." }, { "name": "toReal", "documentation": " Promote an integer to a real number." }, { "name": "toText", "documentation": " Display an integer as text." }, { "name": "shortRep", "documentation": " Alias for `toText`, for the purpose of pretty printing the number." }, { "name": "toJSON", "documentation": " JSON representation of an integer." }, { "name": "miliseconds", "documentation": " Returns a TimeInterval with the length of `self` miliseconds." }, { "name": "seconds", "documentation": " Returns a TimeInterval with the length of `self` seconds." }, { "name": "minutes", "documentation": " Returns a TimeInterval with the length of `self` minutes." }, { "name": "hours", "documentation": " Returns a TimeInterval with the length of `self` hours." }, { "name": "days", "documentation": " Returns a TimeInterval with the length of `self` days." }, { "name": "weeks", "documentation": " Returns a TimeInterval with the length of `self` weeks." }, { "name": "succ", "documentation": " Successor. `a.succ == a + 1`" }, { "name": "upto", "documentation": " Generates a list representing a range. `a.upto b == [a, a + 1, a + 2, ..., b - 1, b]`" }], "name": "Int", "documentation": " Class representing integer numbers of arbitrary size." }, { "methods": [{ "name": "<", "documentation": " Tests whether `self` is lesser than the argument." }, { "name": "+", "documentation": " Floating point addition." }, { "name": "*", "documentation": " Floating point multiplication." }, { "name": "^", "documentation": " Floating point exponentiation." }, { "name": "==", "documentation": " Tests whether `self` is equal to the argument." }, { "name": "-", "documentation": " Floating point subtraction." }, { "name": ">", "documentation": " Tests whether `self` is greater than the argument." }, { "name": "/", "documentation": " Floating point division." }, { "name": "negate", "documentation": " Negation. `a.negate == -1.0 * a`" }, { "name": "toText", "documentation": " Display a real number as text." }, { "name": "shortRep", "documentation": " Displays a number as text." }, { "name": "toJSON", "documentation": " Converts a number to `JSON`." }, { "name": "log", "documentation": " Floating point logarithm with given basis." }, { "name": "round", "documentation": " Round a number with given precision – the result is a real number with the number of digits after the decimal dot equal to the argument." }, { "name": "floor", "documentation": " Round a number down to the closest `Int`" }, { "name": "ceiling", "documentation": " Round a number up to the closest `Int`" }, { "name": "sin", "documentation": " Sine function." }, { "name": "cos", "documentation": " Cosine function." }, { "name": "tan", "documentation": " Tangent function." }, { "name": "sinh", "documentation": " Hyperbolic sine function." }, { "name": "cosh", "documentation": " Hyperbolic cosine function." }, { "name": "tanh", "documentation": " Hyperbolic tangent function." }, { "name": "asin", "documentation": " Inverse sine function." }, { "name": "acos", "documentation": " Inverse cosine function." }, { "name": "atan", "documentation": " Inverse tangent function." }, { "name": "asinh", "documentation": " Inverse hyperbolic sine function." }, { "name": "acosh", "documentation": " Inverse hyperbolic cosine function." }, { "name": "atanh", "documentation": " Inverse hyperbolic tangent function." }, { "name": "exp", "documentation": " Natural exponential function." }, { "name": "ln", "documentation": " Natural logarithm function." }, { "name": "sqrt", "documentation": " Square root." }], "name": "Real", "documentation": " Class representing floating point numbers." }, { "methods": [{ "name": "<", "documentation": " Tests whether `self` is lesser than the argument in lexicographical order." }, { "name": "+", "documentation": " Concatenates two texts together." }, { "name": "==", "documentation": " Tests wheter two texts are equal." }, { "name": ">", "documentation": " Tests whether `self` is greater than the argument in lexicographical order." }, { "name": "toInt", "documentation": " Reinterprets the string as an integer in decimal system. Throws an error when the text does not represent a valid integer." }, { "name": "toReal", "documentation": " Reinterprets the string as a real number in decimal system. Throws an error when the text does not represent a valid real number." }, { "name": "toText", "documentation": " Identity function, included for consistency with other types." }, { "name": "shortRep", "documentation": " Truncates the text for optimal display in interactive mode." }, { "name": "toJSON", "documentation": " Converts the text to `JSON`." }, { "name": "isEmpty", "documentation": " Tests whether the text is empty (equal to `\"\"`)." }, { "name": "length", "documentation": " Measures the text length." }, { "name": "startsWith", "documentation": " Tests whether the argument is a prefix of `self`." }, { "name": "isPrefixOf", "documentation": " Tests whether `self` is a prefix of the argument." }, { "name": "endsWith", "documentation": " Tests whether the argument is a suffix of `self`." }, { "name": "isSuffixOf", "documentation": " Tests whether `self` is a suffix of the argument." }, { "name": "characters", "documentation": " Returns a list of all characters in the text." }, { "name": "words", "documentation": " Returns a list of all words (white-space delimited) in the text." }, { "name": "lines", "documentation": " Returns a list of all lines (newline delimited) in the text." }, { "name": "lowercase", "documentation": " Changes all characters to lowercase." }, { "name": "uppercase", "documentation": " Changes all characters to uppercase." }, { "name": "reverse", "documentation": " Reverses the text." }, { "name": "escapeJSON", "documentation": null }, { "name": "toBinary", "documentation": " Convert the text to bare binary data." }, { "name": "safeToInt", "documentation": " Tries to reinterpret the string as an integer in decimal system. Returns `Nothing` when the text does not represent a valid integer." }, { "name": "safeToReal", "documentation": " Tries to reinterpret the string as a real number in decimal system. Returns `Nothing` when the text does not represent a valid real number." }, { "name": "addPathSegment", "documentation": null }], "name": "Text", "documentation": " The basic class for representing Texts." }, { "methods": [{ "name": "+", "documentation": " Concatenates two pieces of binary data together." }, { "name": "==", "documentation": " Checks whether two pieces of data are equal." }, { "name": "toText", "documentation": " Encodes the binary object as an UTF-8 `Text`. Throws an error when the data does not represent a valid text." }, { "name": "shortRep", "documentation": " Displays a short representation of `Binary` object for use in interactive mode." }, { "name": "length", "documentation": " Measures the length in bytes of binary object." }, { "name": "toBinary", "documentation": " Identity function, included for consistency with other classes." }, { "name": "take", "documentation": " Returns a prefix consisting of the given number of bytes." }, { "name": "drop", "documentation": " Returns a suffix resulting from dropping the given number of bytes at the beginning." }], "name": "Binary", "documentation": " Class for representing arbitrary binary data. Does not attempt to interpret the data in any way." }, { "methods": [{ "name": "+", "documentation": " Complex number addition." }, { "name": "*", "documentation": " Complex number multiplication." }, { "name": "toText", "documentation": " Displays a complex number as text." }, { "name": "shortRep", "documentation": " Displays a complex number as text." }, { "name": "modulus", "documentation": " Complex number modulus." }, { "name": "real", "documentation": "Field getter." }, { "name": "imaginary", "documentation": "Field getter." }], "name": "Complex", "documentation": " Class representing complex numbers over `Real` numbers." }, { "methods": [{ "name": "==", "documentation": " Equality of booleans, semantically the same as logical equivalence." }, { "name": "toText", "documentation": " Represents logical values as `Text`." }, { "name": "shortRep", "documentation": " Represents logical values as `Text`." }, { "name": "toJSON", "documentation": " Converts a boolean value to `JSON`." }, { "name": "and", "documentation": " Boolean and." }, { "name": "or", "documentation": " Boolean or." }, { "name": "not", "documentation": " Logical negation." }], "name": "Bool", "documentation": " Class representing boolean values" }, { "methods": [{ "name": "toText", "documentation": " Represents a `None` value as `Text`." }, { "name": "shortRep", "documentation": " Represents a `None` value as `Text`." }, { "name": "toJSON", "documentation": " Converts a `None` value into `JSON`." }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }], "name": "None", "documentation": " Class representing the lack of interesting value. Mostly used for actions executed solely for their side effects, without any interesting return value." }, { "methods": [{ "name": "==", "documentation": " Tuple equality. Two tuples are equal when their respective elements are equal." }, { "name": "toText", "documentation": " Text representation of a tuple." }, { "name": "shortRep", "documentation": " Short Text representation of a pair." }, { "name": "toJSON", "documentation": " Converts a pair into a `JSON` object." }, { "name": "first", "documentation": " Plucks the first element of a tuple." }, { "name": "second", "documentation": " Plucks the second element of a tuple." }, { "name": "map", "documentation": " Maps a function over both elements of a tuple." }], "name": "Tuple2", "documentation": " Class representing pairs of elements of arbitrary type." }, { "methods": [{ "name": "==", "documentation": " Triple equality. Two triples are equal when their respective elements are equal." }, { "name": "toText", "documentation": " Text representation of a triple." }, { "name": "shortRep", "documentation": " Short Text representation of a triple." }, { "name": "toJSON", "documentation": " Converts a triple into a `JSON` object." }, { "name": "first", "documentation": " Plucks the first element of a triple." }, { "name": "second", "documentation": " Plucks the second element of a triple." }, { "name": "map", "documentation": " Maps a function over all elements of a triple." }, { "name": "third", "documentation": " Plucks the third element of a triple." }], "name": "Tuple3", "documentation": " Class representing triples of elements of arbitrary type." }, { "methods": [{ "name": "==", "documentation": " 4-tuple equality. Two 4-tuples are equal when their respective elements are equal." }, { "name": "toText", "documentation": " Text representation of a 4-tuple." }, { "name": "shortRep", "documentation": " Short text representation of a 4-tuple." }, { "name": "toJSON", "documentation": " Converts a 4-tuple to a `JSON` object." }, { "name": "first", "documentation": " Plucks the first element of a 4-tuple." }, { "name": "second", "documentation": " Plucks the second element of a 4-tuple." }, { "name": "map", "documentation": " Maps a function over all elements of a 4-tuple." }, { "name": "third", "documentation": " Plucks the third element of a 4-tuple." }, { "name": "fourth", "documentation": " Plucks the fourth element of a 4-tuple." }], "name": "Tuple4", "documentation": " Class representing 4-tuples of elements of arbitrary type." }, { "methods": [{ "name": "==", "documentation": " Checks the equality of two `Maybe` values. Returns `True` when both values are `Nothing` or when they are `Just` and the values inside are equal." }, { "name": "toText", "documentation": " Text representation of a `Maybe` object." }, { "name": "shortRep", "documentation": " Short text representation of a `Maybe` object." }, { "name": "toJSON", "documentation": " Converts a `Maybe` object to `JSON`." }, { "name": "map", "documentation": " Takes a function `f` and returns `Just (f a)` when called on `Just a` and `Nothing` otherwise." }, { "name": "toList", "documentation": " Cast a `Maybe` value into a `List`. Returns an empty list when the value is missing and a singleton list otherwise." }, { "name": "get", "documentation": " Returns the value when called on `Just`, throws an error otherwise." }, { "name": "withDefault", "documentation": " Returns the value when called on `Just` or the provided default value when called on a `Nothing`." }, { "name": "isJust", "documentation": " Returns `True` when called on a `Just` and `False` otherwise." }, { "name": "isNothing", "documentation": " Returns `True` when called on a `Nothing` and `False` otherwise." }, { "name": "flatMap", "documentation": " Takes a function returning `Maybe`, maps it over `self` and flattens the result." }, { "name": "each", "documentation": " A variant of `map` that executes any effects performed by the function." }, { "name": "flatten", "documentation": " Flattens nested `Maybe` values. Returns `Just a` when called on `Just (Just a)` and `Nothing` otherwise." }], "name": "Maybe", "documentation": " The basic optional type in Luna. The value of this class can either be a `Nothing` (representing the lack of value) or a `Just value` (in the case value is present).\n This is a type-safe substitute for nullable values known from other languages." }, { "methods": [{ "name": "==", "documentation": " Checks whether two `Either` values are equal. Returns `True` when both values are `Left` or both are `Right` and when the contained values are equal." }, { "name": "left", "documentation": " Returns `a` when called on a `Left a`, throws an error otherwise." }, { "name": "right", "documentation": " Returns `a` when called on a `Right a`, throws an error otherwise." }, { "name": "toText", "documentation": " Text representation of an `Either` value." }, { "name": "shortRep", "documentation": " Short text representation of an `Either` value." }, { "name": "toJSON", "documentation": " Converts an `Either` value into a `JSON` object." }, { "name": "map", "documentation": " Runs the provided function on a `Right` value and returns `Left` values unchanged. `a.map f` is the same as `a.either id f`." }, { "name": "flatMap", "documentation": " Takes a function returning an `Either` and runs it when run on a `Right`. Returns the `Left` value unchangeds." }, { "name": "either", "documentation": " Takes two functions returning the same type, calls the first when called on `Left` and the second for `Right`." }, { "name": "toMaybe", "documentation": " Convert an `Either a b` into a `Maybe` by turning a `Left` into `Nothing` (thus forgetting the value in this case) and a `Right a` into `Just a`." }, { "name": "isLeft", "documentation": " Checks whether the value is `Left a`." }, { "name": "isRight", "documentation": " Checks whether the value is `Right a`." }], "name": "Either", "documentation": " `Either` represents an alternative of two different values – either one or the other is present." }, { "methods": [{ "name": "+", "documentation": " List concatenation." }, { "name": "==", "documentation": " List equality. Two lists are equal when they have the same length and their respective elements are equal." }, { "name": "last", "documentation": null }, { "name": "head", "documentation": " Returns `Just` the first element when the list is not empty, `Nothing` otherwise." }, { "name": "toText", "documentation": " Text represenation of a list." }, { "name": "shortRep", "documentation": " Short text representation of a list." }, { "name": "toJSON", "documentation": " Converts a list to a `JSON` object." }, { "name": "isEmpty", "documentation": " Tests whether the list is empty." }, { "name": "length", "documentation": " Computes the length of a list." }, { "name": "reverse", "documentation": " Reverses the list." }, { "name": "take", "documentation": " Returns the list prefix of a given length or the whole list, when the requested prefix is longer than the list." }, { "name": "drop", "documentation": " Returns the list without the prefix of a requested length, or an empty list if the number of dropped elements is larger than the list length." }, { "name": "map", "documentation": " Maps a function over each element of the list." }, { "name": "flatMap", "documentation": " Maps a list-returning function over each element and concatenates the results." }, { "name": "each", "documentation": " Maps a function over each element of the list, immediately executing all side effects and returning a list of results." }, { "name": "tail", "documentation": " Returns `Just` the list without the first element when the list is not empty, `Nothing` otherwise." }, { "name": "prepend", "documentation": " Prepends an element to the list." }, { "name": "sequence", "documentation": " Executes the actions from each element of the list." }, { "name": "at", "documentation": " Returns `Just` the element at a given position in the list. Returns `Nothing` when the index does not exist." }, { "name": "getAt", "documentation": " Returns the element at a given position in the list. Throws an error when the index does not exist." }, { "name": "fold", "documentation": " Takes an initial value and a function. Returns the result of repeatedly calling the function on the next list element and the current accumulator." }, { "name": "foldLeft", "documentation": " Takes an initial value and a function. Returns the result of repeatedly calling the function on the next list element and the current accumulator." }, { "name": "prependAll", "documentation": " Private." }, { "name": "intersperse", "documentation": " Inserts an element between every two elements of a list." }, { "name": "filter", "documentation": " Returns a list of all the elements for which the given predicate returns `True`." }, { "name": "_merge", "documentation": " Private." }, { "name": "sortBy", "documentation": " Sorts the list in an increasing order by the results of the given function." }, { "name": "_chunkBy", "documentation": " Private." }, { "name": "chunkBy", "documentation": " Chunks the list into lists of consecutive values returning the same value of a given function.\n For example:\n ```\n [1, 2, 3, 4, 2, 2].chunkBy (> 2)    # => [(False, [1, 2]), (True, [3, 4]), (False, [2, 2])]\n ```" }, { "name": "groupBy", "documentation": " Groups the list into lists of values returning the same value of a given function. Requires the return value of the function to be ordered.\n For example:\n ```\n [1, 2, 3, 4, 2, 2].chunkBy (> 2)    # => [(False, [1, 2, 2, 2]), (True, [3, 4])]\n ```" }, { "name": "sort", "documentation": " Sorts the list in an increasing order." }, { "name": "_prefixes", "documentation": " Private." }, { "name": "prefixes", "documentation": " Returns a list of all prefixes of the given list." }, { "name": "zipWith", "documentation": " Returns a list resulting from combining respective elements of two lists with the provided function. The length of the result is the length of the shorter of the lists." }, { "name": "zip", "documentation": " Returns a list of pairs of respective elements of two lists. The length of the result is the length of the shorter of the lists." }, { "name": "_all", "documentation": " Checks whether all elements of a list satisfy a provided predicate." }, { "name": "_any", "documentation": " Checks whether any element of a list satisfies a provided predicate." }, { "name": "collect", "documentation": " Takes a list of `Maybes` and returns a list of all the `Just` elements." }, { "name": "makeText", "documentation": " Converts a list into text by converting each element to text and concatenating them using the provided separator." }, { "name": "concat", "documentation": " Takes a list of lists and concatenates them into a single list." }, { "name": "contains", "documentation": " Checks whether the list contains a given element." }, { "name": "takeWhile", "documentation": " Returns the longest prefix of the list for which a given predicate is satisfied." }], "name": "List", "documentation": " Lists of arbitrary length, consisting of elements of the same type." }, { "methods": [{ "name": "==", "documentation": " Map equality. Two maps are equal when they contain the same keys and the elements associated with each key are equal." }, { "name": "toText", "documentation": null }, { "name": "toJSON", "documentation": " Converts a map with `Text` keys to JSON." }, { "name": "isEmpty", "documentation": " Tests whether the map is empty." }, { "name": "map", "documentation": " Applies a function to each value in the map." }, { "name": "toList", "documentation": " Converts the map into a list of `(key, value)` pairs." }, { "name": "get", "documentation": " Gets an element for a given key. Throws an exception when the key is not present in the Map." }, { "name": "empty", "documentation": " Returns an empty map." }, { "name": "singleton", "documentation": " Returns a map with a single element." }, { "name": "size", "documentation": " Returns the number of values stored in the map." }, { "name": "lookup", "documentation": " Looks up an element for a given key." }, { "name": "insert", "documentation": " Inserts an element at a given key." }, { "name": "_delta", "documentation": null }, { "name": "_ratio", "documentation": null }, { "name": "_bin", "documentation": null }, { "name": "_singleL", "documentation": null }, { "name": "_singleR", "documentation": null }, { "name": "_doubleL", "documentation": null }, { "name": "_doubleR", "documentation": null }, { "name": "_rotateL", "documentation": null }, { "name": "_rotateR", "documentation": null }, { "name": "_balance", "documentation": null }, { "name": "_balanceL", "documentation": null }, { "name": "_balanceR", "documentation": null }, { "name": "_maxView", "documentation": null }, { "name": "_minView", "documentation": null }, { "name": "_glue", "documentation": null }, { "name": "delete", "documentation": " Deletes a key from the given map. If the the key is missing, it returns the original map." }], "name": "Map", "documentation": " Represents a dictionary from keys of given type to values of given type. The keys need to have ordering defined." }, { "methods": [{ "name": "toInt", "documentation": null }, { "name": "toReal", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "coefficient", "documentation": "Field getter." }, { "name": "exponent", "documentation": "Field getter." }], "name": "Scientific", "documentation": null }, { "methods": [{ "name": "toText", "documentation": " Dumps a `JSON` structure into a `Text` object." }, { "name": "shortRep", "documentation": " Short text representation for a `JSON` object." }, { "name": "toJSON", "documentation": " Identity. Included for consistency with other classes." }, { "name": "toBinary", "documentation": null }, { "name": "get", "documentation": " Returns the value associated with a given key. Throws an error when\n the `JSON` is not an object or the key is missing." }, { "name": "at", "documentation": " Returns `Just` the element with a given index assuming the `JSON`\n represents an array and the index is in range. Returns `Nothing` otherwise." }, { "name": "getAt", "documentation": " Returns the element with a given index assuming the `JSON` represents\n an array and the index is in range. Throws an error otherwise." }, { "name": "empty", "documentation": " Returns an empty `JSON` object" }, { "name": "lookup", "documentation": " Returns `Just` the value associated with a given key. Returns `Nothing`\n when the `JSON` is not an object or when the key is missing." }, { "name": "insert", "documentation": " Inserts a value for a given key into the `JSON` object.\n Throws an exception when the `JSON` does not represent an object." }, { "name": "delete", "documentation": " Deletes a value for a given key from the `JSON` object. Does nothing when\n the `JSON` does not represent an object or does not contain the key." }, { "name": "safeParse", "documentation": " Parses a `Text` into a `JSON` object. Returns `Left` containing error\n message when the `Text` does not contain a valid `JSON` object." }, { "name": "parse", "documentation": " Parses a `Text` into a `JSON` object. Throws an error when the `Text`\n does not contain a valid `JSON` object." }, { "name": "render", "documentation": " Dumps a `JSON` structure into a `Text` object." }, { "name": "asObject", "documentation": " Returns a `Map` from `Text` to `JSON`, assuming the `JSON` represents\n an object. Throws an error otherwise." }, { "name": "asText", "documentation": " Returns a `Text` assuming the `JSON` represents text.\n Throws an error otherwise." }, { "name": "asReal", "documentation": " Returns a `Real` assuming the `JSON` represents a number.\n Throws an error otherwise." }, { "name": "asInt", "documentation": " Returns an `Int` assuming the `JSON` represents a number and it\n didn't contain a decimal point. Throws an error otherwise." }, { "name": "asBool", "documentation": " Returns a `Bool` assuming the `JSON` represents a boolean.\n Throws an error otherwise." }, { "name": "asList", "documentation": " Returns a list of `JSON` object assuming the `JSON` represents an array.\n Throws an error otherwise." }, { "name": "safeAsObject", "documentation": " Returns `Just` a `Map` from `Text` to `JSON`, assuming the `JSON`\n represents an object. Returns `Nothing` otherwise." }, { "name": "safeAsText", "documentation": " Returns `Just` a `Text` assuming the `JSON` represents text.\n Returns `Nothing` otherwise." }, { "name": "safeAsReal", "documentation": " Returns `Just` a `Real` assuming the `JSON` represents a number.\n Returns `Nothing` otherwise." }, { "name": "safeAsInt", "documentation": " Returns `Just` an `Int` assuming the `JSON` represents a number and it\n didn't contain a decimal point. Returns `Nothing` otherwise." }, { "name": "safeAsBool", "documentation": " Returns `Just` a `Bool` assuming the `JSON` represents a boolean.\n Returns `Nothing` otherwise." }, { "name": "safeAsList", "documentation": " Returns `Just` a list of `JSON` object assuming the `JSON` represents\n an array. Returns `Nothing` otherwise." }, { "name": "getObject", "documentation": " Gets a `Map` from `Text` to `JSON` associated with a given key.\n Throws an error when the `JSON` is not an object, the key is not present\n or the associated value is not an object." }, { "name": "getText", "documentation": " Gets a `Text` associated with a given key.\n Throws an error when the `JSON` is not an object, the key is not present\n or the associated value is not a text." }, { "name": "getReal", "documentation": " Gets a `Real` associated with a given key. Throws an error when\n the `JSON` is not an object, the key is not present\n or the associated value is not a number." }, { "name": "getInt", "documentation": " Gets an `Int` associated with a given key. Throws an error when the\n `JSON` is not an object, the key is not present or the associated value\n is not an integer." }, { "name": "getBool", "documentation": " Gets a `Bool` associated with a given key. Throws an error when the\n `JSON` is not an object, the key is not present or the associated value\n is not a boolean." }, { "name": "getList", "documentation": " Gets a `List` of `JSON` values associated with a given key. Throws\n an error when the `JSON` is not an object, the key is not present\n or the associated value is not an array." }, { "name": "lookupObject", "documentation": " Looks up a `Map` from `Text` to `JSON` associated with a given key.\n Returns `Nothing` when the `JSON` is not an object, the key is not\n present or the associated value is not an object." }, { "name": "lookupText", "documentation": " Looks up a `Text` associated with a given key. Returns `Nothing` when\n the `JSON` is not an object, the key is not present or the associated\n value is not a text." }, { "name": "lookupReal", "documentation": " Looks up a `Real` associated with a given key. Returns `Nothing` when\n the `JSON` is not an object, the key is not present or the associated\n value is not a number." }, { "name": "lookupInt", "documentation": " Looks up an `Int` associated with a given key. Returns `Nothing` when\n the `JSON` is not an object, the key is not present or the associated\n value is not an integer." }, { "name": "lookupBool", "documentation": " Looks up a `Bool` associated with a given key. Returns `Nothing` when\n the `JSON` is not an object, the key is not present or the associated\n value is not a boolean." }, { "name": "lookupList", "documentation": " Looks up a `List` of `JSON` values associated with a given key.\n Returns `Nothing` when the `JSON` is not an object, the key is not\n present or the associated value is not an array." }], "name": "JSON", "documentation": " Class representing JSON objects." }, { "methods": [{ "name": "take", "documentation": " Takes the value out of the `MVar` and returns it, leaving the `MVar` empty.\n Calling this on an empty `MVar` suspends the thread until the value is put in it." }, { "name": "read", "documentation": " Takes the value out of the `MVar` and returns it, leaving the original value in the `MVar`.\n Calling this on an empty `MVar` suspends the thread until the value is put in it." }, { "name": "put", "documentation": " Puts a value inside the `MVar`. Calling this method on a non-empty `MVar` suspends the thread until the old value is taken out." }], "name": "MVar", "documentation": " MVar is a mutable variable, safe to read and modify in a multi-threaded environment.\n An MVar can either be empty or can contain a value.\n Reading an empty `MVar` locks the thread until a value is written.\n Writing to a non-empty `MVar` locks the thread until a value is taken out." }, { "methods": [{ "name": "head", "documentation": "Field getter." }, { "name": "take", "documentation": " Returns the prefix of the stream of given length." }, { "name": "drop", "documentation": " Drops the given number of elements from the stream." }, { "name": "map", "documentation": " Runs a function on each element on the stream, not executing any side effects." }, { "name": "each", "documentation": " Runs a function on each element of the stream, immediately executing all side effects. Due to the stream being infinite, this function never terminates." }, { "name": "tail", "documentation": "Field getter." }, { "name": "fold", "documentation": " Takes a function and returns a stream resulting from calling the function repeatedly on the next element of the stream and the previously accumulated value, where the first accumulated value is the first element in the stream." }, { "name": "collect", "documentation": " Transforms a stream containing `Maybe` values into one containing only the `Just` items." }, { "name": "takeWhile", "documentation": " Returns the longest prefix of stream in which all elements satisfy the given predicate." }, { "name": "isStream", "documentation": null }, { "name": "foldFrom", "documentation": " Takes an initial value and function. Returns a stream resulting from calling the function repeatedly on the next element of the stream and the previously accumulated value." }, { "name": "consume", "documentation": " `s.consume n` returns a list of the first `n` elements of `s` and the result of dropping the first `n` values of `s`." }, { "name": "consumeWhile", "documentation": " Returns the longest prefix in which all elements satisfy the given predicate, and the result of dropping this prefix from the original stream." }, { "name": "dropWhile", "documentation": " Drops the longest prefix of stream in which all elements satisfy the given predicate." }, { "name": "eval", "documentation": " Evaluates all actions associated with stream elements sequentially. Due to the stream being infinite, this function never terminates." }, { "name": "rateLimit", "documentation": " Returns a stream containing the same values as the original stream, but produces them no more often than the given time interval." }], "name": "Stream", "documentation": " `Stream` represents an infinite data source, with a list-like API." }], "functions": [{ "name": ">=", "documentation": " Greater or equal operator. Requires the objects to define both `>` and `==` methods." }, { "name": "<=", "documentation": " Less than or equal to operator. Requires the objects to define both `<` and `==` methods." }, { "name": "if_then_else", "documentation": " The basic conditional operator. `if a then b else c` is `b` when `a` is `True` and `c` otherwise." }, { "name": "seq", "documentation": null }, { "name": "switch", "documentation": " Alias for the `if then else` construction, looks better with currying." }, { "name": "throw", "documentation": " Takes a Text and throws it as an error." }, { "name": "id", "documentation": " Identity function. `id a` is the same as `a` for any `a`." }, { "name": "everyWithState", "documentation": " A variant of `every` in which the action modifies some local state while running." }, { "name": "newMVar", "documentation": " Creates an empty MVar object.\n MVar is a mutable variable, safe to read and modify in a multi-threaded environment.\n An MVar can either be empty or can contain a value.\n Reading an empty `MVar` suspends the thread until a value is written.\n Writing to a non-empty `MVar` suspends the thread until a value is taken out." }, { "name": "fork", "documentation": " Takes an action and executes it in a separate thread." }, { "name": "streamFrom", "documentation": " Builds a stream by repeatedly calling an action. Useful for consuming low-level streaming data sources." }, { "name": "repeatWhile", "documentation": " Repeat an action while predicate returns `True`. Returns a List of all the values for which predicate returned `True`." }, { "name": "delayAsync", "documentation": " Executes an action in a separate thread, after waiting the specified time interval." }, { "name": "every", "documentation": " Takes an action and a `TimeInterval`. Evaluates the action in given intervals, returning a `Stream` of consecutive values.\n Particularly useful for polling webservices or scheduling tasks." }, { "name": "pi", "documentation": " The mathematical constant π = 3.14159265359." }, { "name": "const", "documentation": " Constant function. Ignores its second argument and always returns the first." }, { "name": "when", "documentation": " Takes an action and evaluates it only when a given condition is met. Always returns `None`." }, { "name": "unless", "documentation": " Takes an action returning `None` and evaluating the action only unless a given condition is met." }, { "name": "print", "documentation": " Print the value to standard output. Can be called on any value which defines a `toText` method returning `Text`." }, { "name": "readFile", "documentation": " Read file from the hard drive, returning a `Text` value." }, { "name": "writeFile", "documentation": " Write a Text object into a file with a given path." }, { "name": "catch", "documentation": " Takes a value and a function from Text to value. Returns the value if it was correct or calls the function if the value was erroneous." }] }, { "name": "Std.Foreign", "classes": [{ "methods": [{ "name": "shortRep", "documentation": null }, { "name": "toJSON", "documentation": null }, { "name": "call", "documentation": null }], "name": "FunPtr", "documentation": null }], "functions": [{ "name": "lookupSymbol", "documentation": null }] }, { "name": "Std.Foreign.C.Value", "classes": [{ "methods": [{ "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "ptr", "documentation": null }, { "name": "fromText", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "isNull", "documentation": null }, { "name": "null", "documentation": null }, { "name": "free", "documentation": null }], "name": "CString", "documentation": null }, { "methods": [{ "name": "toList", "documentation": null }, { "name": "size", "documentation": null }, { "name": "ptr", "documentation": null }, { "name": "free", "documentation": null }, { "name": "make", "documentation": null }, { "name": "alloc", "documentation": null }, { "name": "assertInBounds", "documentation": null }, { "name": "uncheckedReadAt", "documentation": null }, { "name": "readAt", "documentation": null }, { "name": "uncheckedWriteAt", "documentation": null }, { "name": "writeAt", "documentation": null }, { "name": "fromList", "documentation": null }], "name": "Array", "documentation": null }, { "methods": [{ "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toList", "documentation": null }, { "name": "ptr", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "free", "documentation": null }, { "name": "make", "documentation": null }, { "name": "fromList", "documentation": null }, { "name": "typeRep", "documentation": null }], "name": "NullTerminatedArray", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CChar", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUChar", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CWChar", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CInt", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CInt8", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CInt16", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CInt32", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CInt64", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUInt", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUInt8", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUInt16", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUInt32", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CUInt64", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CLong", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CULong", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CSize", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "%", "documentation": null }, { "name": "/", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toReal", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromInt", "documentation": null }], "name": "CTime", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "/", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toReal", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromReal", "documentation": null }], "name": "CFloat", "documentation": null }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "==", "documentation": null }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "/", "documentation": null }, { "name": "negate", "documentation": null }, { "name": "toReal", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "abs", "documentation": null }, { "name": "fromReal", "documentation": null }], "name": "CDouble", "documentation": null }, { "methods": [{ "name": "retType", "documentation": null }], "name": "RetType", "documentation": null }, { "methods": [{ "name": "==", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "isNull", "documentation": null }, { "name": "free", "documentation": null }, { "name": "cast", "documentation": null }, { "name": "moveBytes", "documentation": null }], "name": "Ptr", "documentation": null }, { "methods": [{ "name": "retType", "documentation": null }, { "name": "fromRetType", "documentation": null }, { "name": "read", "documentation": null }, { "name": "ptr", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "byteSize", "documentation": null }, { "name": "readPtr", "documentation": null }, { "name": "writePtr", "documentation": null }, { "name": "isNull", "documentation": null }, { "name": "null", "documentation": null }, { "name": "free", "documentation": null }, { "name": "typeRep", "documentation": null }, { "name": "moveBytes", "documentation": null }, { "name": "moveElems", "documentation": null }, { "name": "write", "documentation": null }, { "name": "malloc", "documentation": null }, { "name": "mallocElems", "documentation": null }, { "name": "mallocBytes", "documentation": null }], "name": "Pointer", "documentation": null }, { "methods": [{ "name": "==", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "isNull", "documentation": null }, { "name": "free", "documentation": null }, { "name": "cast", "documentation": null }, { "name": "moveBytes", "documentation": null }, { "name": "_ptr", "documentation": null }], "name": "ForeignPtr", "documentation": null }, { "methods": [{ "name": "read", "documentation": null }, { "name": "ptr", "documentation": null }, { "name": "toCArg", "documentation": null }, { "name": "isNull", "documentation": null }, { "name": "null", "documentation": null }, { "name": "free", "documentation": null }, { "name": "typeRep", "documentation": null }, { "name": "moveBytes", "documentation": null }, { "name": "moveElems", "documentation": null }, { "name": "write", "documentation": null }, { "name": "malloc", "documentation": null }, { "name": "mallocElems", "documentation": null }, { "name": "fptr", "documentation": null }, { "name": "fromPointer", "documentation": null }], "name": "ManagedPointer", "documentation": null }], "functions": [{ "name": "nullPtr", "documentation": null }] }, { "name": "Std.Geo", "classes": [{ "methods": [{ "name": "toJSON", "documentation": null }, { "name": "properties", "documentation": "Field getter." }, { "name": "geometry", "documentation": "Field getter." }], "name": "GeoJSONFeature", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }, { "name": "features", "documentation": "Field getter." }], "name": "GeoJSONFeatureCollection", "documentation": null }], "functions": [] }, { "name": "Std.Graphics2D", "classes": [{ "methods": [{ "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "-", "documentation": null }, { "name": "toJSON", "documentation": null }, { "name": "transform", "documentation": null }, { "name": "translate", "documentation": null }, { "name": "rotate", "documentation": null }, { "name": "toSVGDefs", "documentation": null }, { "name": "toSVG", "documentation": null }, { "name": "transformation", "documentation": "Field getter." }, { "name": "definition", "documentation": "Field getter." }], "name": "Geo", "documentation": null }, { "methods": [{ "name": "x", "documentation": "Field getter." }, { "name": "y", "documentation": "Field getter." }, { "name": "toJSON", "documentation": null }], "name": "Point", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }, { "name": "point", "documentation": "Field getter." }, { "name": "leftHandle", "documentation": "Field getter." }, { "name": "rightHandle", "documentation": "Field getter." }], "name": "ControlPoint", "documentation": null }, { "methods": [{ "name": "+", "documentation": null }, { "name": "*", "documentation": null }, { "name": "a", "documentation": "Field getter." }, { "name": "b", "documentation": "Field getter." }, { "name": "c", "documentation": "Field getter." }, { "name": "d", "documentation": "Field getter." }, { "name": "toJSON", "documentation": null }, { "name": "toList", "documentation": null }, { "name": "tx", "documentation": "Field getter." }, { "name": "ty", "documentation": "Field getter." }], "name": "AffineTransformation", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }, { "name": "toSVGDefs", "documentation": null }], "name": "Shape", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }], "name": "BooleanOperation", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }, { "name": "toSVGDefs", "documentation": null }, { "name": "type", "documentation": "Field getter." }, { "name": "operands", "documentation": "Field getter." }], "name": "Boolean", "documentation": null }, { "methods": [{ "name": "toJSON", "documentation": null }, { "name": "toSVGDefs", "documentation": null }], "name": "GeoDef", "documentation": null }], "functions": [{ "name": "translationTrans", "documentation": null }, { "name": "rotationTrans", "documentation": null }, { "name": "identityTrans", "documentation": null }, { "name": "point", "documentation": null }, { "name": "lpoint", "documentation": null }, { "name": "rpoint", "documentation": null }, { "name": "lrpoint", "documentation": null }, { "name": "circle", "documentation": null }, { "name": "rectangle", "documentation": null }, { "name": "path", "documentation": null }, { "name": "emptyGeo", "documentation": null }] }, { "name": "Std.HTTP", "classes": [{ "methods": [{ "name": "toText", "documentation": null }], "name": "HttpMethod", "documentation": " A class representing Http request method" }, { "methods": [{ "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "toBinary", "documentation": null }, { "name": "addValue", "documentation": " Adds one pair to the body.\n Returns an `HttpSimpleBody` with the new additional pair" }, { "name": "values", "documentation": "Field getter." }], "name": "HttpSimpleBody", "documentation": " Helper class for passing parameters in the body of an Http request" }, { "methods": [{ "name": "json", "documentation": " Body of a response converted to `JSON`." }, { "name": "stream", "documentation": " Returns the body of the response as a stream.\n Even though it can be used with any response, it is most\n useful when combined with an inherently \"streamy\" data source,\n for example responses from the Twitter Stream API.\n See the `Std.Base` module's `Stream` class for information on\n on working with streams of data in Luna." }, { "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "headers", "documentation": "Field getter." }, { "name": "body", "documentation": " The body of the response as a `Binary` blob." }, { "name": "successful", "documentation": " Tells us whether the response came back yielding a successful result.\n We assume that response is successful when its code is one of: 200, 201, 202." }, { "name": "text", "documentation": " Body of the response converted to `Text`." }, { "name": "responseCode", "documentation": "Field getter." }, { "name": "getChunk", "documentation": "Field getter." }], "name": "HttpResponse", "documentation": " Response of an Http request, allows for different methods\n of accessing the body contents, see the methods." }, { "methods": [{ "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "uri", "documentation": "Field getter." }, { "name": "headers", "documentation": "Field getter." }, { "name": "auth", "documentation": "Field getter." }, { "name": "oauth1", "documentation": "Field getter." }, { "name": "params", "documentation": "Field getter." }, { "name": "body", "documentation": "Field getter." }, { "name": "method", "documentation": "Field getter." }, { "name": "setMethod", "documentation": " Sets the method of this `HttpReuqest` to a given `HttpMethod`." }, { "name": "setBody", "documentation": " Sets the body of a request.\n Can be called with anything that supports a `toBinary` method,\n including `Text`, `Binary`, `JSON` and `HttpSimpleBody` instances." }, { "name": "setUri", "documentation": null }, { "name": "addHeader", "documentation": " Set the header (key) to a value (val). The header needs to be\n a valid Http header name, like `Accept-Charset` (but the case\n does not matter)." }, { "name": "setBasicAuth", "documentation": " Use the provided username and password as `HttpBasicAuth`." }, { "name": "setParam", "documentation": " Append given key and value to the request params.\n Note: for params passed as the request body,\n consider using `HttpSimpleBody` helper class." }, { "name": "setOAuth1", "documentation": " Construct OAuth1 authentication headers using the provided\n `OAuth1Data` object. For a more detailed description of OAuth, please\n consult `Std.OAuth`." }, { "name": "setOAuth2", "documentation": " Set the OAuth2 authorization token.\n Note that this assumes that the caller already is in possesion of such a token,\n which can be obtained, among other ways, by using the `OAuth2` class from `Std.OAuth`.\n For a more detailed description of OAuth, please consult `Std.OAuth`." }, { "name": "perform", "documentation": " Given a fully constructed `HttpRequest` object, this method\n actually performs the request. Note: no data will actually\n be sent until this method is called." }], "name": "HttpRequest", "documentation": " A class representing an Http request.\n Even though it is possible to construct members of this\n class by hand, the idiomatic way of making the requests\n uses the helper class `Http`. Please consult the documentation below.\n This class provides a couple of setters to manipulate the default\n requests created by `Http` methods." }, { "methods": [{ "name": "head", "documentation": " Create a basic Http HEAD request for a given uri." }, { "name": "get", "documentation": " Create a basic Http GET request for a given uri." }, { "name": "delete", "documentation": " Create an Http DELETE request for a given url." }, { "name": "put", "documentation": " Create an Http PUT request for a given uri and body.\n The body can be anything that provides a `toBinary` method,\n including the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types." }, { "name": "post", "documentation": " Create an Http POST request for a given uri and body.\n The body can be anything that provides a `toBinary` method,\n including the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types." }, { "name": "patch", "documentation": " Create an Http PATCH request for a given uri and body.\n The body can be anything that provides a `toBinary` method,\n including the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types." }, { "name": "connect", "documentation": " Create a basic Http CONNECT request for a given uri." }, { "name": "trace", "documentation": " Create a basic Http TRACE request for a given uri." }, { "name": "options", "documentation": " Create an Http OPTIONS request for a given url." }, { "name": "getBinary", "documentation": " A helper method that immediately gets a binary blob from a given url.\n There is no need to call `perform` here, as it returns a `Binary` response." }, { "name": "getJSON", "documentation": " A helper method that immediately gets a JSON response from a given url.\n There is no need to call `perform` here, as it returns a `JSON` response." }], "name": "Http", "documentation": " The main class for issuing Http requests.\n Provides methods for the most common request methods.\n The basic usage is the following:\n `resp = Http.get \"http://someurl.com/\" . perform`\n When you want to customize the way the requests are made, you can use the setters\n provided by the `HttpRequest` class in the following way:\n ```\n resp = Http.post \"http://someurl.com/\" . setHeader \"Accept\" \"*\"\n                                        . setBasicAuth \"user\" \"pass\"\n                                        . setParam \"someParam\" \"someValue\"\n                                        . perform\n ```\n Note: the `get`, `post`, `put` and `delete` methods need to be followed\n by a `perform` invocation to actually make the request.\n Once we obtain the response object (`resp` in the examples above), we\n can use the methods of the `HttpResponse` class to process it, meaning\n in the examples above you can later call `resp.stream` or `resp.body`." }], "functions": [{ "name": "defaultHttpRequest", "documentation": " A helper function constructing a default `HttpRequest`,\n intended for internal use by the `Http` class.\n It is actually equivalent to `Http.get`." }, { "name": "emptyHttpBody", "documentation": " Conveniently creates an empty `HttpSimpleBody`" }] }, { "name": "Std.MessagePack", "classes": [{ "methods": [{ "name": "==", "documentation": null }, { "name": "toReal", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "toJSON", "documentation": null }, { "name": "toBinary", "documentation": null }, { "name": "map", "documentation": null }, { "name": "toList", "documentation": null }, { "name": "each", "documentation": null }, { "name": "at", "documentation": null }, { "name": "filter", "documentation": null }, { "name": "lookup", "documentation": null }, { "name": "lookupText", "documentation": null }, { "name": "_lookup_list_key", "documentation": null }, { "name": "hasKey", "documentation": null }, { "name": "hasText", "documentation": null }, { "name": "safeLookupText", "documentation": null }, { "name": "sum", "documentation": null }, { "name": "average", "documentation": null }], "name": "MsgPack", "documentation": null }], "functions": [] }, { "name": "Std.OAuth", "classes": [{ "methods": [{ "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "clientKey", "documentation": "Field getter." }, { "name": "clientSecret", "documentation": "Field getter." }, { "name": "oauthToken", "documentation": "Field getter." }, { "name": "oauthTokenSecret", "documentation": "Field getter." }], "name": "OAuth1Data", "documentation": " A class encapsulating all the necessary OAuth1 data.\n That means: a `clientKey`, a `clientSecret`, an `oauthToken` and `oauthTokenSecret`.\n It can be passed directly to `HttpResponse.setOAuth1` method, resulting in\n the following usage:\n ```\n oauthData = OAuth1Data someClientKey someClientSecret someOAuthToken someOAuthTokenSecret\n resp = Http.get \"http://someurl.com/\" . setOAuth1 oauthData . perform\n # process the response...\n ```" }, { "methods": [{ "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "clientSecret", "documentation": "Field getter." }, { "name": "clientId", "documentation": "Field getter." }, { "name": "accessTokenEndpoint", "documentation": "Field getter." }, { "name": "invalidateTokenEndpoint", "documentation": "Field getter." }, { "name": "callback", "documentation": "Field getter." }], "name": "OAuth2Data", "documentation": " A class encapsulating all the necessary OAuth2 data.\n That means: a `clientId`, a `clientSecret`, an `accessTokenEndpoint`,\n an `invalidateTokenEndpoint` and an optional `callback` url." }, { "methods": [{ "name": "postRequest", "documentation": " A helper method for issuing OAuth2-related requests." }, { "name": "fetchAccessToken", "documentation": " Fetches the authorization token using the provided `OAuth2Data` object." }, { "name": "invalidateToken", "documentation": " Invalidates a token when it is no longer needed." }], "name": "OAuth2", "documentation": " A class used for obtaining the OAuth2 authorization token.\n Given the necessary `OAuth1Data` it will issue a call\n to the `accessTokenEndpoint` and fetch the token. When the\n token is no longer needed it can be invalidated with a call\n to `invalidateToken`.\n An example flow is the following:\n ```\n oauthData = OAuth1Data someClientId someClientSecret someOAuthToken someOAuthTokenSecret\n token = OAuth2.fetchAccessToken oauthData\n resp = Http.get \"http://someurl.com/\" . setOAuth2 token . perform\n ## process the response...\n OAuth2.invalidateToken oauthData token\n ```\n For a more in-depth description of the OAuth2 flow, please see\n https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2" }], "functions": [] }, { "name": "Std.System", "classes": [{ "methods": [{ "name": "isCreatePipe", "documentation": null }], "name": "PipeRequest", "documentation": " Data type representing different ways of connecting the processes outputs (e.g. stdout).\n `Inherit` means that the process gets a given pipe after the process that created it.\n `UseHandle` lets you specify a file to connect to the process instead of, for example, stdout.\n `CreatePipe` creates a fresh connection (pipe) that you can later use to communicate with the process.\n `NoStream` leaves a given pipe closed (e.g. if you don't need the processes stdin)." }, { "methods": [{ "name": "isBuffered", "documentation": null }], "name": "BufferMode", "documentation": " Data type used for specifying the buffering mode of the input-output operations." }, { "methods": [{ "name": "setBuffering", "documentation": " Lets you specify the `BufferMode` for this file." }, { "name": "isOpen", "documentation": " Checks whether the file this handle is referring to is open." }, { "name": "isClosed", "documentation": " Checks whether the file this handle is referring to is closed." }, { "name": "close", "documentation": " Closes the file." }, { "name": "flush", "documentation": " Flushes any buffered content to make sure that it actually goes through." }, { "name": "getContents", "documentation": " Return the contents of the file." }, { "name": "getLine", "documentation": " Get one line of the file." }, { "name": "putText", "documentation": " Write some `Text` to the file." }, { "name": "putLine", "documentation": " Write some `Text` to the file, appending a new line at the end." }, { "name": "toStream", "documentation": " Access this file's contents as a `Stream`.\n For more information on dealing with streams in Luna\n please consult the `Stream` class documentation for `Std.Base`." }], "name": "FileHandle", "documentation": " A class representing a file in the filesytstem." }, { "methods": [{ "name": "wait", "documentation": " Wait for the process described by this handle to finish." }], "name": "ProcessHandle", "documentation": " A class representing the low-level handle to the process in the operating system.\n Note that this class is used internally by `Std.System` and\n most users should use `Process` instead." }, { "methods": [{ "name": "stdin", "documentation": "Field getter." }, { "name": "stdout", "documentation": "Field getter." }, { "name": "stderr", "documentation": "Field getter." }, { "name": "wait", "documentation": " Wait for this process to finish execution." }, { "name": "handle", "documentation": "Field getter." }], "name": "Process", "documentation": " A class representing an operating system process.\n It allows you to access the standard input (`stdin`), the standard output\n (`stdout`) and standard error (`stderr`) of this process, hence allowing\n other processes to communicate with this one.\n It also exposes the `wait` method." }, { "methods": [{ "name": "args", "documentation": "Field getter." }, { "name": "stdin", "documentation": "Field getter." }, { "name": "stdout", "documentation": "Field getter." }, { "name": "stderr", "documentation": "Field getter." }, { "name": "command", "documentation": "Field getter." }, { "name": "setCommand", "documentation": " Set the command to run.\n In general, calls to this method should be avoided, as the command is best passed\n to the `Command.create` call." }, { "name": "setArgs", "documentation": " Set the arguments to the process.\n In general, calls to this method should be avoided, as the arguments are best passed\n to the `Command.create` call." }, { "name": "setStdin", "documentation": " Set the standard input of the process to a specified `PipeRequest`." }, { "name": "setStdout", "documentation": " Set the standard output of the process to a specified `PipeRequest`." }, { "name": "setStderr", "documentation": " Set the standard error of the process to a specified `PipeRequest`." }, { "name": "run", "documentation": " Actually run this process, returning a `Process` instance." }, { "name": "runWithInput", "documentation": " Run this process with specified `input`." }, { "name": "runWithStream", "documentation": " Run this process, passing a stream as its input." }, { "name": "execute", "documentation": " Execute this process from beginning to end, returning its standard output, standard error\n and exit code instead of the `Process` object." }], "name": "ProcessDescription", "documentation": " An object representing a process to launch (as opposed to `Process`, which is an already running process).\n Note: in most cases the constructor for this class should not be called directly.\n It is advisable to use `Command.create` instead. Please see the documentation for `Command`.\n This class provides a set of setters for changing the arguments to the process\n or changing its input and outputs.\n A `ProcessDescription` class will transform into a running `Process` once its `run` method is called." }, { "methods": [{ "name": "create", "documentation": " Create the command to be run." }], "name": "Command", "documentation": " The entry point to creating new processes and running system commands.\n It facilitates easy creation of processes by passing the command to run and its arguments.\n Once you call `Command.create <cmd> <args>`, you can modify it using the `ProcessDescription`\n methods like `setStdin`. Then, you need to call `run` (or one of its variants) to actually\n execute the process. Example of redirecting the output of `ls -al` to a file:\n ```\n cmd = Command.create \"ls\" [\"-al\"] . setStdout (UseHandle somefile)\n cmd.run\n ```" }, { "methods": [{ "name": "toInt", "documentation": null }, { "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "toJSON", "documentation": null }, { "name": "exitSuccess", "documentation": " Is this code a successful one?" }, { "name": "exitFailure", "documentation": " Is this code not a successful one?" }], "name": "ExitCode", "documentation": " Exit code of a process.\n Can either be `ExitSuccess` or `ExitFailure`, in which case it will\n additionally contain the exit code." }], "functions": [{ "name": "withForkWait", "documentation": null }] }, { "name": "Std.Test", "classes": [{ "methods": [{ "name": "specify", "documentation": null }], "name": "Test", "documentation": null }, { "methods": [{ "name": "not", "documentation": null }, { "name": "body", "documentation": "Field getter." }, { "name": "run", "documentation": null }, { "name": "errorMessage", "documentation": "Field getter." }, { "name": "negatedErrorMessage", "documentation": "Field getter." }], "name": "Assertion", "documentation": null }, { "methods": [{ "name": "should", "documentation": null }, { "name": "shouldNot", "documentation": null }, { "name": "subject", "documentation": "Field getter." }], "name": "TestSubject", "documentation": null }, { "methods": [{ "name": "run", "documentation": null }], "name": "Bench", "documentation": null }], "functions": [{ "name": "be", "documentation": null }, { "name": "equal", "documentation": null }, { "name": "throwError", "documentation": null }, { "name": "satisfy", "documentation": null }] }, { "name": "Std.Time", "classes": [{ "methods": [{ "name": "<", "documentation": " Is this `Time` earlier than the `other`?" }, { "name": "==", "documentation": " Does this and the `other` `Time` point to the same time?" }, { "name": ">", "documentation": " Is this `Time` later than the `other`?" }, { "name": "toText", "documentation": " Converts a `Time` to `Text` using the default format (YYYY-MM-DD.HH:MM:SS)." }, { "name": "shortRep", "documentation": null }, { "name": "toJSON", "documentation": null }, { "name": "safeParse", "documentation": " Try to parse `Time` from `Text` assuming the default format of date and time.\n Returns `Just time` if successful, `Nothing` otherwise." }, { "name": "parse", "documentation": " Parse `Time` from `Text`.\n Returns a `Time` object and throws an error if unable to parse the time." }, { "name": "timeZone", "documentation": " Returns the timezone associated with this `Time`." }, { "name": "now", "documentation": " Gets the current time in the users timezone. Usage: `Time.now`." }, { "name": "timeOfDay", "documentation": " Gets time of day (hours, minutes, seconds) as a `TimeOfDay` instance." }, { "name": "setTimeOfDay", "documentation": " Sets the time-of-day part of this `Time` to a given `TimeOfDay` instance." }, { "name": "setTimeZone", "documentation": " Sets the timezone of this time to a given `TimeZone` instance." }, { "name": "_days", "documentation": null }, { "name": "addDays", "documentation": " Advances the date by a given number of days." }, { "name": "subDays", "documentation": " Subtracts a given number of days from the date." }, { "name": "beginningOfDay", "documentation": " Gets the beginning of the current day.\n If called on February 14th at 4:00, it will return February 14th 0:00" }, { "name": "endOfDay", "documentation": " Gets the end of the current day.\n If called on February 14th at 4:00, it will return February 15th 0:00" }, { "name": "timeOfYear", "documentation": " Gets the time of year in form of a tuple: (year, month, day)" }, { "name": "fromTimeOfYear", "documentation": " Creates a `Time` object from its parameters: the year, month and day and an optional `TimeZone`.." }, { "name": "beginningOfMonth", "documentation": " Gets the `Time` representing the first day of the current month." }, { "name": "endOfMonth", "documentation": " Gets the `Time` representing the last day of the current month." }, { "name": "beginningOfYear", "documentation": " Gets the `Time` representing the first day (January 1st) of the current year." }, { "name": "endOfYear", "documentation": " Gets the `Time` representing the last day (December 31st) of the current year." }, { "name": "toUTC", "documentation": " Converts this `Time` instance to a `UTCTime`." }, { "name": "diff", "documentation": " Calculate difference between to time values." }, { "name": "add", "documentation": " Add a `TimeInterval` to this `Time`." }, { "name": "sub", "documentation": " Subtract a `TimeInterval` from this `Time`." }, { "name": "defaultFormat", "documentation": " Default format for `Time`: YYYY-MM-DD.HH:MM:SS+TTTT.\n The `TTTT` in the format above stands for the timezone offset." }, { "name": "safeParseFmt", "documentation": " Tries to parse `Time` from `Text` using the specified format.\n Returns `Just time` if successful and `Nothing` otherwise.\n In most cases, you can use `safeParse`, which uses the default format.\n If a custom format is needed, please see:\n https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime" }, { "name": "parseFmt", "documentation": " Parse `Time` from `Text` using the supplied format.\n Returns a `Time` object and throws an error if unable to parse the time.\n In most cases, you can use `parse`, which uses the default format.\n If a custom format is needed, please see:\n https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime" }, { "name": "format", "documentation": " Formats a `Time` according to the specifier supplied (converting to `Text`).\n If a custom format is needed, please see:\n https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime" }, { "name": "fromEpoch", "documentation": " Parses a `Time` from a number representing the standard epoch." }, { "name": "toEpoch", "documentation": " Converts a `Time` to an epoch." }], "name": "Time", "documentation": " A class representing time (and date), with timezone.\n By default it will use the current timezone as set on the user's machine.\n If you wish to override that behaviour, you can explicitly set the timezone\n with `setTimeZone`, like:\n ```\n Time.now . setTimeZone TimeZone.cst\n ```\n\n `Time` supports various formatting and parsing methods, including the\n default `toText` method, `format` (accepting a format string), `toEpoch`,\n `parse`, `parseFmt` (for custom formats) and `fromEpoch`.\n\n `Time` instances can be compared and you can add and subtract `TimeIntervals`,\n like:\n ```\n Time.now . add 2.minutes\n ```\n The above can also be expressed in a more natural syntax with:\n ```\n 2.minutes.fromNow\n ```\n\n Additional helper methods exist to make working with `Time` easier, please\n consult the docstring for each method for further information." }, { "methods": [{ "name": "==", "documentation": " Is the offset of this `TimeZone` the same as of the `other` one?" }, { "name": "current", "documentation": " Returns the `TimeZone` object representing the current timezone." }, { "name": "toText", "documentation": null }, { "name": "minutes", "documentation": " The offset (in minutes) from the UTC timezone." }, { "name": "create", "documentation": " Creates a new `TimeZoneInstance`." }, { "name": "summerOnly", "documentation": " Is this timezone valid only throughout the summertime?" }, { "name": "name", "documentation": " The three letter shortcut name for this timezone, can be blank." }, { "name": "fromMinutes", "documentation": " Creates a nameless timezone with a given offset (in minutes)." }, { "name": "fromHours", "documentation": " Creates a nameless timezone with a given offset (in hours)." }, { "name": "utc", "documentation": null }, { "name": "gmt", "documentation": null }, { "name": "cst", "documentation": null }, { "name": "pst", "documentation": null }], "name": "TimeZone", "documentation": " A class representing the time zone.\n Please keep in mind that the offset is in minutes, as some timezones\n use the multiple of 15 minutes as the offset." }, { "methods": [{ "name": "<", "documentation": " Does this `TimeOfDay` point to an earlier time during the day than the `other`?" }, { "name": "==", "documentation": " Is this `TimeOfDay` equal to the other? (Up to one second resolution)." }, { "name": ">", "documentation": " Does this `TimeOfDay` point to a later time during the day than the `other`?" }, { "name": "second", "documentation": null }, { "name": "hour", "documentation": null }, { "name": "minute", "documentation": null }, { "name": "midnight", "documentation": null }, { "name": "noon", "documentation": null }], "name": "TimeOfDay", "documentation": " A class representing the time of day (hours, minutes, seconds)." }, { "methods": [{ "name": "<", "documentation": " Is this `UTCTime` earlier than the `other`?" }, { "name": "==", "documentation": " Does this and the `other` `UTCTime` point to the same time?" }, { "name": ">", "documentation": " Is this `UTCTime` later than the `other`?" }, { "name": "toText", "documentation": " Converts a `Time` to `Text` using the default format (YYYY-MM-DD.HH:MM:SS)." }, { "name": "shortRep", "documentation": null }, { "name": "diff", "documentation": " Calculate difference between two time values." }, { "name": "add", "documentation": " Add a `TimeInterval` to this `UTCTime`." }, { "name": "sub", "documentation": " Subtract a `TimeInterval` from this `UTCTime`." }, { "name": "defaultFormat", "documentation": " Default format for `UTCTime`: YYYY-MM-DD.HH:MM:SS." }, { "name": "format", "documentation": " Formats a `Time` according to the specifier supplied (converting to `Text`).\n If a custom format is needed, please see:\n https://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime" }, { "name": "toZonedTime", "documentation": " Converts this `UTCTime` instance to a `Time`, using the local timezone." }], "name": "UTCTime", "documentation": " A class representing the UTC time (mostly to facilitate other computations).\n For the majority of use-cases it is recommended to use the `Time` class, which\n supports timezones and provides a much richer API. However, for frequent\n operations involving time differences and arithmetic operations, this class\n will provide slightly better performance." }, { "methods": [{ "name": "<", "documentation": null }, { "name": "+", "documentation": null }, { "name": "==", "documentation": " Are this and the `other` `TimeIntervals` the same?" }, { "name": "-", "documentation": null }, { "name": ">", "documentation": null }, { "name": "toInt", "documentation": null }, { "name": "toReal", "documentation": " Return a real representing the number of picoseconds in this `TimeInterval`." }, { "name": "toText", "documentation": null }, { "name": "shortRep", "documentation": null }, { "name": "add", "documentation": null }, { "name": "sub", "documentation": null }, { "name": "toSeconds", "documentation": " Return the number of seconds in this interval." }, { "name": "toMiliseconds", "documentation": " Return the number of miliseconds in this interval." }, { "name": "toMicroseconds", "documentation": " Return the number of microseconds in this interval." }, { "name": "before", "documentation": " Subtract this `TimeInterval` from a given `Time`, hence\n returning a point in time `before` the given `Time`." }, { "name": "from", "documentation": " Add this `TimeInterval` to a given `Time`, hence\n returning a point in time some `TimeInterval` `from` the given `Time`." }, { "name": "ago", "documentation": " Return this `TimeInterval` before now (so some amount of time ago)." }, { "name": "fromNow", "documentation": " Return this `TimeInterval` after now (so some amount of time from now)." }], "name": "TimeInterval", "documentation": " A class representing time intervals, that is: a difference between two times.\n Can be converted to different time resolutions like seconds, miliseconds and microseconds.\n Internally the time interval is stored with picosecond resolution.\n The main purpose of this class is to make working with time intuitive:\n using the helper methods you can write things like:\n ```\n 5.seconds.ago\n 10.minutes.fromNow\n 15.seconds.before someTime\n 20.minutes.after someTime\n ```" }], "functions": [] }, { "name": "Std.WebSockets", "classes": [{ "methods": [{ "name": "path", "documentation": "Field getter." }, { "name": "create", "documentation": " A method actually connecting to the socket." }, { "name": "port", "documentation": "Field getter." }, { "name": "secure", "documentation": "Field getter." }, { "name": "host", "documentation": "Field getter." }, { "name": "setHost", "documentation": " Sets the host part of the url to connect to." }, { "name": "setPath", "documentation": " Sets the path part of the url to connect to." }, { "name": "setPort", "documentation": " Specifies the port to which to connect." }, { "name": "setSecure", "documentation": " Used for explicitly making the connection secure.\n Note that in the majority of use cases this will be deduced from\n the url, hence rendering the usage of this method unnecessary." }], "name": "WebSocketInstance", "documentation": " A class used for creating new `WSConnection` instances,\n hence making the connections over web sockets. Please note\n that it is advisable to use the `WebSocket.connection` method rather\n than to create new connections instead of instantiating this class\n directly. On the other hand, the setters of this class are\n used well with the helper method. Please see the documentation for `WebSocket`." }, { "methods": [{ "name": "stream", "documentation": " Tap into the WebSocket, creating a `Stream` of `Binary` blobs.\n Please see the documentation for `Stream` in `Std.Base` for\n information on how to process streams in Luna." }, { "name": "read", "documentation": " Read from the WebSocket.\n Returns a `Binary` blob that can later be converted\n to any data type necessary." }, { "name": "write", "documentation": " Send textual data over the WebSocket connection.\n Can be given anything that is convertable to `Text` (exposing a `toText` method)." }, { "name": "close", "documentation": " Close the WebSocket connection after it is no longer needed." }, { "name": "writeBinary", "documentation": " Send binary data over the WebSocket connection.\n Can be given anything that is convertable to `Binary` (exposing a `toBinary` method)." }], "name": "WSConnection", "documentation": " A class representing the WebSocket connection.\n This is the handle you are given after you create a WebSocket\n connection with `WebSocket.connection`. It allows you to read\n and write to the WebSocket and close it after it is no longer needed." }, { "methods": [{ "name": "sendToAll", "documentation": " Send a textual message to all of the connected clients.\n The message may be of any type exposing a `toText` method." }, { "name": "sendBinaryToAll", "documentation": " Send a binary message to all of the connected clients.\n The message may be of any type exposing a `toBinary` method." }, { "name": "nextMessage", "documentation": " Helper method that reads the next message that has arrived to the server." }, { "name": "messageStream", "documentation": " Taps into the stream of incoming messages, returning a `Stream` of `Binary` blobs.\n Please see the documentation for `Stream` in `Std.Base` for\n information on how to process streams in Luna." }], "name": "WSServer", "documentation": " A simple broadcast WebSocket server.\n Allows you to send messages to all of the connected clients at once.\n Note that you should use the `WebSocket.server` helper method to create\n instances of this class. Refer to the documentation of the `WebSocket`\n class for more information." }, { "methods": [{ "name": "connection", "documentation": " Connect to the WebSocket at given address (the `host` param).\n You must call `create` on the object created by this method to actually make the connection.\n The host may or may not contain the `ws` or `wss` specifier.\n If `wss` is specified, the connection will be assumed to be secure\n and the port will be set to 443. For `ws` connections the default port\n is 80. If you wish to create a secure connection but leave out the\n `wss` part of the url, you must explicitly call `setSecure` to override\n the defaults. Example usage:\n ```\n conn = WebSocket.connection \"ws://somehost.com/sockets\" . setPort 12345 . create\n stream = conn.stream\n # process the incoming stream...\n conn.close\n ```" }, { "name": "server", "documentation": " Create a simple, broadcast server that recieves messages from its clients\n and can send messages to all of the clients at once.\n you need to specify what will be the address (`host`) of the server and\n on which port it will be accepting the connections (`port`). Once you create it,\n you can call all of the `WSServer` methods on the returned server instance.\n Example usage:\n ```\n server = WebSocket.server \"somehost\" 55555\n server.sendToAll \"hello, clients\"\n responseStream = server.messageStream\n ```" }], "name": "WebSocket", "documentation": " The main class for dealing with WebSockets.\n Supports creating client-side connections (with `connect`) and\n servers (with `server`)." }], "functions": [] }, { "name": "Std.XML", "classes": [{ "methods": [{ "name": "render", "documentation": null }, { "name": "setAttr", "documentation": null }], "name": "XNode", "documentation": null }], "functions": [] }] }